

#agentDirectories.write("Agent Directories\n=================\n")
#agentFiles.write("Agent Files\n===========\n")
##agentList.write("Agents\n=======\n")
#agentDirectories.close()
#agentFiles.close()


        #agentDirectories = open("AgentsDirectories.list", "a")
        #agentDirectories.write('{}\n'.format(agent))
        #agentDirectories.close()
        #agentDirectories = open("AgentsDirectories.list", "w")

        #agentFiles = open("agentFiles.list", "w")
        #agentFiles = open("agentFiles.list", "a")
        #agentFiles.write('{}\n'.format(agent))
        #agentFiles.close()

 #agentDirectories = open("AgentsDirectories.list", "r")
#agentFiles = open("agentFiles.list", "r")
##print('\n{}'.format(agentDirectories.read()))
##print('\n{}'.format(agentFiles.read()))
#agentDirectories.close()
#agentFiles.close()

        #print(' : {}'.format())
        #print("[\'{}\']".format(dirWorkingAbs)) # Absolute
        #path.dirname(path1)

        #agentList = open("agent.list", "a")
        #agentList.write('.{}'.format(name))
        #agentList.close()
        #agentList = open("agent.list", "a")
        #agentList.write('.{}\n'.format(name))
        #agentList.close()

        #system(('sphinx-apidoc -f -o {} {}').format(dirCurrent, dirWorkingAbs))



## Using readlines()
#file1 = open('myfile.txt', 'r')
#Lines = file1.readlines()

#count = 0
## Strips the newline character
#for line in Lines:
    #count += 1
    #print("Line{}: {}".format(count, line.strip()))

#path = dirProject.split('/')
#pathAgent = dirProject.split('/')[-1]
#dirProject = path.split(dirWorking)

#for dirProject, dirs, files in walk("."):
    #path = dirProject.split('/').parent
#dirProject = path(dirProject)#.parent
#print(dirProject.split('/')[-1])
##dirProject = dirProject[:-1]
#print(type(dirProject))
#for dirProject, dirs, files in walk(dirProject, topdown=True):
    #pathAgent = dirProject.split('/')[-1]
    #print( '╟─{}'.format(str(pathAgent)))
    #for f in files:
        #print('║├─{}'.format(f))

#for dirProject, dirs, files in walk(dirProject, topdown=True):
    #for name in dirs:
        #print('-{}'.format(name))
        #for fileName in files:
            #print('--{}'.format(fileName))

#print(pathAgent)

#print(type(dirProject), type(f))


    #pathBase = path.basename(dirProject)
    #print(type(dirProject))
    #path = dirProject.split(dirProject)
    #print( '|', (len(path))*'', '[', dirProject,']')
    #print( '|', (len(path))*' 'str(pathAgent),']')
    #print( '|', (len(path))*'', '[', path.split(dirProject),']')
    #print( '|', (len(path))*'---', '[', path.basename(dirProject),']')
        #if f == files[0]:
            #print('║ ╓─ {}'.format(f))
        #if f > files[0] and f != files[-1]:
        #else:
            #print('  ╙─ {}'.format(f))
            #print('╙──', len(path)*'', f)

    #print('')╓
#from ProjectDesignBuilder import __version__
        #fileAgent = []
        #fileAgent = fileAgent.append(path.join(dirWorking, name))